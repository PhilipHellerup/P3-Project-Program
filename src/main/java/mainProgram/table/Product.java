package mainProgram.table; // Project Organization

/* --- Imports --- */
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.persistence.*;
import java.util.ArrayList;
import java.util.List;

/* --- Product Class --- */
// Represents a product in the system
// This entity is mapped to the "products" table in the database.
// Each Product can be linked to multiple JobParts (via one-to-many relationship).
@Entity
@Table(name = "products")
public class Product {
    // Attributes
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    // Primary key generated automatically by the database
    private int id;                      // Maps to: id (Generated by Default as Identity)

    @Column(name = "\"productNumber\"")  // Maps Java field to Database column named exactly "productNumber" not "product-number"
    private String productNumber;        // Maps to: productNumber (Not product_number)
    private String name;                 // Maps to: name
    @Column(name = "\"EAN\"")            // Maps Java field to Database column named exactly "EAN" not "ean"
    @JsonProperty("EAN")                 // Maps JSON key "EAN": This field when sending/receiving HTTP data
    private String EAN;                  // Maps to: EAN (Not ean)
    @Column(name = "category")           // Maps Java field to Database column named exactly "category" not "type"
    private String type;                 // Maps to: category (Not type)
    private String price;                // Maps to: price

    // One-to-Many Relationship: One Product can be associated with many JobParts.
    /**
     * @mappedBy "product"
     * Indicates that the JobPart entity owns the relationship
     * through its "product" field. This makes it a bidirectional
     * relationship where JobPart has the foreign key.
     *
     * @cascade CascadeType.ALL
     * All JPA operations (persist, merge, remove, refresh, detach)
     * performed on this Product will cascade to associated JobParts.
     * EXAMPLE: Deleting a Product will also delete all its JobParts.
     *
     * @orphanRemoval true
     * If a JobPart is removed from this list, it will be automatically
     * deleted from the database. This ensures no orphaned JobPart records
     * exist without a parent Product.
    **/
    @OneToMany(mappedBy = "product", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<JobPart> jobParts = new ArrayList<>();

    // Constructor
    // (OPTIONAL) Constructor for manual creation of Product Objects
    public Product(String productNumber, String name, String EAN, String type, String price) {
        this.productNumber = productNumber;
        this.name = name;
        this.EAN = EAN;
        this.type = type;
        this.price = price;
    }

    // No-Parameter constructor required by JPA/Hibernate, when fetching Product objects from the database
    public Product() {}

    // Methods
    // Getters
    public int getId() {
        return id;
    }

    public String getProductNumber() {
      return productNumber;
    }

    public String getName() {
          return name;
    }

    public String getEAN() {
          return EAN;
      }

    public String getType() {
      return type;
    }

    public String getPrice() {
      return price;
    }

    // Setters
    public void setProductNumber(String productNumber) {
        this.productNumber = productNumber;
    }

    public void setName(String name) {
          this.name = name;
      }

    public void setEAN(String EAN) {
          this.EAN = EAN;
      }

    public void setType(String type) {
          this.type = type;
      }

    public void setPrice(String price) {
        this.price = price;
    }
}
